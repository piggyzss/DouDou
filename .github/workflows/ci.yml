name: CI Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  schedule:
    # 每天 UTC 2:00 运行深度安全扫描
    - cron: '0 2 * * *'
  workflow_dispatch:
    # 支持手动触发

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # 前端质量检查
  frontend-ci:
    name: 前端CI检查
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 安装依赖
        run: |
          npm ci
          npm run preflight
      
      # 代码质量检查
      - name: ESLint 检查
        run: npm run lint -- --max-warnings 100
        
      - name: TypeScript 类型检查
        run: npx tsc --noEmit
      
      # 测试套件
      - name: 运行测试
        run: |
          npm run test:ci
          npm run test:coverage
      
      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage-${{ matrix.node-version }}
          fail_ci_if_error: false
      
      # 构建验证
      - name: 构建验证
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: '--max-old-space-size=4096'
      
      # 缓存构建产物 (为CD准备)
      - name: 缓存构建产物
        uses: actions/cache@v3
        if: matrix.node-version == '20' && github.ref == 'refs/heads/main'
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ github.sha }}

  # 后端质量检查
  backend-ci:
    name: 后端CI检查
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    defaults:
      run:
        working-directory: ./agent-backend
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'agent-backend/requirements.txt'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
      
      # 代码质量检查
      - name: 代码格式检查
        run: |
          black --check --diff .
          flake8 .
      
      - name: 类型检查
        run: mypy . || true
      
      # 测试套件
      - name: 运行测试
        run: pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term
      
      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./agent-backend/coverage.xml
          flags: backend
          name: backend-coverage-${{ matrix.python-version }}
          fail_ci_if_error: false
      
      # Docker构建验证
      - name: Docker构建验证
        if: matrix.python-version == '3.11'
        run: |
          echo "🐳 验证Docker构建..."
          docker build -t doudou-backend:ci-test .
          echo "✅ Docker构建验证通过"

  # 增强安全扫描
  security-scan:
    name: 安全与质量扫描
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于深度分析
        
      - name: 设置环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'agent-backend/requirements.txt'
      
      - name: 安装依赖
        run: |
          npm ci
          cd agent-backend
          pip install -r requirements.txt
          pip install safety pip-audit bandit semgrep
      
      # 前端安全检查
      - name: NPM 安全审计
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          
      # 后端安全检查  
      - name: Python 依赖安全检查
        run: |
          cd agent-backend
          safety check --json --output ../safety-report.json || true
          pip-audit --format=json --output=../pip-audit.json || true
          
      - name: Bandit 安全扫描
        run: |
          cd agent-backend
          bandit -r . -f json -o ../bandit-report.json || true
          
      # 高级安全扫描
      - name: Semgrep 扫描
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
        continue-on-error: true
        
      # 密钥泄露检查
      - name: 检查密钥泄露
        run: |
          docker run --rm -v $(pwd):/repo zricethezav/gitleaks:latest detect \
            --source /repo \
            --report-format json \
            --report-path /repo/gitleaks-report.json || true
        continue-on-error: true
        
      # CodeQL 分析
      - name: 初始化 CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: javascript, python
          queries: security-and-quality
          
      - name: 自动构建
        uses: github/codeql-action/autobuild@v4
        
      - name: 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v4
        with:
          category: "/language:javascript,python"
      
      # 上传安全报告
      - name: 上传安全报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            npm-audit.json
            safety-report.json
            pip-audit.json
            bandit-report.json
            gitleaks-report.json
          retention-days: 90

  # 许可证合规检查
  license-check:
    name: 许可证合规检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安装依赖
        run: npm ci
        
      - name: 许可证检查
        run: |
          npx license-checker --json --out license-report.json
          npx license-checker --summary
        continue-on-error: true
        
      - name: 上传许可证报告
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # 性能基线测试
  performance-test:
    name: 性能基线测试
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安装依赖
        run: |
          npm ci
          npm install -g lighthouse-ci
          
      - name: 构建应用
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          
      - name: 启动应用
        run: |
          npm start &
          sleep 10
        
      - name: Lighthouse CI
        run: |
          lhci autorun --config=.lighthouserc.json || true
        continue-on-error: true
        
      - name: 上传性能报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: .lighthouseci/
          retention-days: 30

  # CI状态汇总和报告
  ci-status:
    name: CI状态检查与报告汇总
    needs: [frontend-ci, backend-ci, security-scan, license-check, performance-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载所有报告
        uses: actions/download-artifact@v4
        continue-on-error: true
        
      - name: 检查CI状态
        id: ci-check
        run: |
          echo "🔍 检查各项CI结果..."
          echo "前端CI: ${{ needs.frontend-ci.result }}"
          echo "后端CI: ${{ needs.backend-ci.result }}"
          echo "安全扫描: ${{ needs.security-scan.result }}"
          echo "许可证检查: ${{ needs.license-check.result }}"
          echo "性能测试: ${{ needs.performance-test.result }}"
          
          # 检查核心CI是否通过
          if [[ "${{ needs.frontend-ci.result }}" == "failure" || "${{ needs.backend-ci.result }}" == "failure" ]]; then
            echo "❌ 核心CI检查失败"
            echo "ci-passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 核心CI检查通过"
          echo "ci-passed=true" >> $GITHUB_OUTPUT
      
      - name: 生成汇总报告
        run: |
          echo "# 🔍 CI/CD 汇总报告" > ci-summary.md
          echo "" >> ci-summary.md
          echo "**构建时间**: $(date)" >> ci-summary.md
          echo "**分支**: ${{ github.ref_name }}" >> ci-summary.md
          echo "**提交**: ${{ github.sha }}" >> ci-summary.md
          echo "**触发事件**: ${{ github.event_name }}" >> ci-summary.md
          echo "" >> ci-summary.md
          
          echo "## 📊 检查结果" >> ci-summary.md
          echo "| 检查项目 | 状态 | 说明 |" >> ci-summary.md
          echo "|---------|------|------|" >> ci-summary.md
          
          # 前端CI
          if [[ "${{ needs.frontend-ci.result }}" == "success" ]]; then
            echo "| 🌐 前端CI | ✅ 通过 | ESLint, TypeScript, 测试 |" >> ci-summary.md
          else
            echo "| 🌐 前端CI | ❌ 失败 | 检查代码规范和测试 |" >> ci-summary.md
          fi
          
          # 后端CI  
          if [[ "${{ needs.backend-ci.result }}" == "success" ]]; then
            echo "| 🐍 后端CI | ✅ 通过 | Black, Flake8, PyTest |" >> ci-summary.md
          else
            echo "| 🐍 后端CI | ❌ 失败 | 检查代码格式和测试 |" >> ci-summary.md
          fi
          
          # 安全扫描
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "| 🔒 安全扫描 | ✅ 通过 | 依赖审计, CodeQL, 密钥检查 |" >> ci-summary.md
          else
            echo "| 🔒 安全扫描 | ⚠️ 警告 | 发现潜在安全问题 |" >> ci-summary.md
          fi
          
          # 许可证检查
          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "| 📜 许可证检查 | ✅ 通过 | 依赖许可证合规 |" >> ci-summary.md
          else
            echo "| 📜 许可证检查 | ⚠️ 警告 | 检查依赖许可证 |" >> ci-summary.md
          fi
          
          # 性能测试
          if [[ "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "| 🚀 性能测试 | ✅ 通过 | Lighthouse 基准测试 |" >> ci-summary.md
          elif [[ "${{ needs.performance-test.result }}" == "skipped" ]]; then
            echo "| 🚀 性能测试 | ⏭️ 跳过 | 仅PR和定时任务运行 |" >> ci-summary.md
          else
            echo "| 🚀 性能测试 | ⚠️ 警告 | 性能基准未达标 |" >> ci-summary.md
          fi
          
          echo "" >> ci-summary.md
          echo "## 📈 详细报告" >> ci-summary.md
          echo "详细的检查报告和日志可在 [Actions 页面](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 查看。" >> ci-summary.md
      
      - name: 上传汇总报告
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary-report
          path: ci-summary.md
          retention-days: 90
          
      - name: PR 评论
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('ci-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
              
              console.log('✅ PR评论发布成功');
            } catch (error) {
              console.log('⚠️ PR评论发布失败:', error.message);
            }
      
      - name: 设置最终状态
        run: |
          echo "CI_PASSED=${{ steps.ci-check.outputs.ci-passed }}" >> $GITHUB_ENV
          echo "BUILD_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "REPORT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
