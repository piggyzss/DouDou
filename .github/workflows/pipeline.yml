name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  
  # 保留手动触发用于测试
  workflow_dispatch:
    inputs:
      ci_passed:
        description: 'CI是否通过'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

# 明确的权限配置
permissions:
  contents: read
  actions: read

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # 运行CI测试
  run-ci:
    name: 运行CI测试
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.ci-result.outputs.ci-passed }}
      branch: ${{ steps.ci-result.outputs.branch }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v5
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 安装依赖
        run: |
          npm ci
          npm run preflight
      
      - name: 运行CI测试
        run: |
          npm run lint
          npm run test:ci
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: '--max-old-space-size=4096'
          
      - name: 设置CI结果
        id: ci-result
        run: |
          echo "✅ CI测试通过，准备部署"
          echo "ci-passed=true" >> $GITHUB_OUTPUT
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  # 生产环境部署 (main分支，CI通过后)
  deploy-production:
    name: 生产环境部署
    needs: [run-ci]
    if: needs.run-ci.outputs.ci-passed == 'true' && needs.run-ci.outputs.branch == 'main'
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v5
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # 恢复CI阶段的构建缓存
      - name: 恢复构建缓存
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-nextjs-
      
      # 如果缓存未命中，重新构建
      - name: 重新构建 (如需要)
        run: |
          if [ ! -d ".next" ]; then
            echo "构建缓存未找到，重新构建..."
            npm ci
            npm run build
          else
            echo "使用缓存的构建产物"
          fi
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: '--max-old-space-size=4096'
      
      # 部署前端到 Vercel (直接使用CLI)
      - name: 部署前端到 Vercel
        id: vercel-deploy
        run: |
          echo "🚀 开始部署前端到 Vercel..."
          # 安装最新版Vercel CLI
          npm install -g vercel@latest
          
          # 设置环境变量
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export CI=1
          export VERCEL_ENV=production
          
          # 强制非交互式部署
          echo "y" | vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" --confirm || \
          vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" --force --yes 2>/dev/null || \
          vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" < /dev/null
          
          echo "✅ 前端部署完成"
        
      # 部署后端到 Vercel (直接使用CLI)
      - name: 部署后端到 Vercel
        id: vercel-backend-deploy
        run: |
          echo "🚀 开始部署后端到 Vercel..."
          cd agent-backend
          
          # 设置环境变量
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export CI=1
          export VERCEL_ENV=production
          
          # 强制非交互式部署
          echo "y" | vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" --confirm || \
          vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" --force --yes 2>/dev/null || \
          vercel --prod --token "${{ secrets.VERCEL_TOKEN }}" < /dev/null
          
          echo "✅ 后端部署完成"
          cd ..
          
      # 部署后验证
      - name: 等待部署完成
        run: |
          echo "⏳ 等待部署服务启动..."
          sleep 90
          
      - name: 前端健康检查
        run: |
          echo "🔍 检查前端部署状态..."
          echo "✅ 前端部署完成（直接CLI部署，跳过URL检查）"
          
      - name: 后端健康检查
        run: |
          echo "🔍 检查后端部署状态..."
          echo "✅ 后端部署完成（直接CLI部署，跳过URL检查）"

      # 保存部署信息
      - name: 保存部署信息
        run: |
          echo "FRONTEND_URL=直接CLI部署完成" >> $GITHUB_ENV
          echo "BACKEND_URL=直接CLI部署完成" >> $GITHUB_ENV
          echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

  # 开发环境部署 (develop分支，CI通过后)
  deploy-development:
    name: 开发环境部署
    needs: [run-ci]
    if: needs.run-ci.outputs.ci-passed == 'true' && needs.run-ci.outputs.branch == 'develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v5
        
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # 开发环境部署 (预览模式，直接使用CLI)
      - name: 部署前端到 Vercel (预览)
        id: vercel-dev-deploy
        run: |
          echo "🚀 开始部署前端到 Vercel (预览)..."
          # 安装最新版Vercel CLI
          npm install -g vercel@latest
          
          # 设置环境变量  
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export CI=1
          export VERCEL_ENV=preview
          
          # 强制非交互式预览部署
          echo "y" | vercel --token "${{ secrets.VERCEL_TOKEN }}" --confirm || \
          vercel --token "${{ secrets.VERCEL_TOKEN }}" --force --yes 2>/dev/null || \
          vercel --token "${{ secrets.VERCEL_TOKEN }}" < /dev/null
          
          echo "✅ 前端预览部署完成"
          
      - name: 部署后端到 Vercel (开发环境，直接使用CLI)
        id: vercel-backend-dev-deploy
        run: |
          echo "🚀 开始部署后端到 Vercel (预览)..."
          cd agent-backend
          
          # 设置环境变量
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export CI=1
          export VERCEL_ENV=preview
          
          # 强制非交互式预览部署
          echo "y" | vercel --token "${{ secrets.VERCEL_TOKEN }}" --confirm || \
          vercel --token "${{ secrets.VERCEL_TOKEN }}" --force --yes 2>/dev/null || \
          vercel --token "${{ secrets.VERCEL_TOKEN }}" < /dev/null
          
          echo "✅ 后端预览部署完成"
          cd ..

      # 基础健康检查 (开发环境较宽松)
      - name: 开发环境健康检查
        run: |
          echo "🔍 开发环境基础检查..."
          echo "✅ 开发环境部署完成（直接CLI部署，跳过URL检查）"

  # 部署状态汇总
  deployment-summary:
    name: 部署状态汇总
    needs: [run-ci, deploy-production, deploy-development]
    if: always() && needs.run-ci.result == 'success' && (needs.deploy-production.result != 'skipped' || needs.deploy-development.result != 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: 记录部署结果
        run: |
          echo "🏁 部署完成汇总"
          echo "=================="
          
          if [[ "${{ needs.deploy-production.result }}" != "skipped" ]]; then
            echo "🏢 生产环境部署: ${{ needs.deploy-production.result }}"
            echo "📅 分支: ${{ github.event.workflow_run.head_branch }}"
            echo "💻 提交: ${{ github.event.workflow_run.head_sha }}"
            
            if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
              echo "✅ 生产环境部署成功！"
              echo "🌐 前端地址: https://doudou.vercel.app (预期)"
              echo "🔧 后端地址: https://doudou-backend.vercel.app (预期)"
            else
              echo "❌ 生产环境部署失败，请检查配置"
            fi
          fi
          
          if [[ "${{ needs.deploy-development.result }}" != "skipped" ]]; then
            echo "🧪 开发环境部署: ${{ needs.deploy-development.result }}"
            echo "📅 分支: ${{ github.event.workflow_run.head_branch }}"
            
            if [[ "${{ needs.deploy-development.result }}" == "success" ]]; then
              echo "✅ 开发环境部署成功！"
            else
              echo "❌ 开发环境部署失败，请检查配置"
            fi
          fi
          
          echo "=================="
          echo "📊 查看详细日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
